#1. 윈도우 생성 : WinAPI를 사용하여 윈도우를 생성

HWND hWnd = CreateWindow("D3D Tutorial", "D3D Tutorial 02: Vertices", // lpClassName, lpWindowName
			WS_OVERLAPPEDWINDOW, 100, 100, 300, 300,				  // dwStyle, x, y, nWidth, nHeight
			GetDesktopWindow(), NULL, wc.hInstance, NULL);			  // hWndParent, hMenu, hInstance, lpParam


#2. Direct3D 초기화

ZeroMemory : 지정된 주소(dest)에 길이(length) 만큼 0으로 채워준다.

SwapEffect : 화면에 그래픽을 출력하는 동안 이들 버퍼 간의 교환 방식을 정의한다.
- D3DSWAPEFFECT_DISCARD : 렌더링이 끝나면 백 버퍼의 내용을 버리고, 새로운 프레임을 렌더링 하면 새롭게 백 버퍼를 덮어씌운다. 매 프레임마다 전부 지우고 새로 그린다고 생각하면 된다.
- D3DSWAPEFFECT_FLIP : 백 버퍼와 프론트 버퍼가 서로 자리를 바꾸는 방식. 성능은 좋지만 메모리 사용량이 증가할 수 있다.
- D3DSWAPEFFECT_COPY : 백 버퍼의 내용을 프론트 버퍼로 복사한다. 백 버퍼의 내용을 유지해야 할 때 사용한다.
- D3DSWAPEFFECT_OVERLAY: 오버레이 서피스를 사용한다.

BackBufferFormat : 백 버퍼의 픽셀 형식을 정의한다. 백 버퍼의 픽셀 형식은 렌더링되는 이미지의 색상, 정확도, 성능 등에 영향을 미친다.
- UNKNOWN : 백 버퍼 형식을 명시적으로 지정하지 않고 Direct3D가 자동으로 현재 디스플레이 모드에 맞는 적절한 백 버퍼 형식을 선택한다.

CreateDevice : Direct3D의 렌더링을 수행할 IDirect3DDevice9 객체를 생성. 이 디바이스는 GPU와 상호 작용하며, 그래픽 렌더링, 자원 관리, 상태 설정 등의 작업을 수행
CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, hWnd, D3DCREATE_SOFTWARE_VERTEXPROCESSING, &d3dpp, &g_pd3dDevice)
- D3DADAPTER_DEFAULT : 기본 그래픽 어댑터를 사용한다.
- D3DDEVTYPE_HAL : 하드웨어 가속 디바이스를 사용한다.
- hWnd : 렌더링할 대상 창의 핸들. 렌더링 출력을 할 창을 지정한다.
- D3DCREATE_SOFTWARE_VERTEXPROCESSING : 정점 처리를 소프트웨어에서 수행한다.
- &d3dpp : 구조체의 포인터
- &g_pd3dDevice : D3D디바이스의 포인터


#3. 정점 버퍼 생성

- 정점 버퍼(Vertex Buffer) : 정점을 보관하기 위한 D3D용 객체인데, 사용자가 FVF를 사용하여 자유롭게 형식을 정의할 수 있다. 기본적으로 정점정보를 갖고있는 메모리블럭이며 정점버퍼를 생성한 다음에는 반드시 Lock()과 Unlock()으로 포인터를 얻어내서 정점정보를 정점버퍼에 써넣어야 한다.
							D3D는 인덱스버퍼도 사용가능하다. 정점버퍼나 인덱스버퍼는 기본 시스템 메모리외에 디바이스 메모리(비디오카드 메모리)에 생성될수 있는데, 대부분의 비디오카드에서는 이렇게 할경우 엄청난 속도의 향상을 얻을 수 있다.
- FVF(Flexible Vertex Format) : 유연한 정점 포맷. D3D에서 정해져있는 vertex의 format 중 자신이 제작하는 프로그램에 알맞은 것들을 모아서 새로운 format을 정의

- CreateVertexBuffer : GPU에서 사용할 정점 버퍼를 생성.

CreateVertexBuffer(3 * sizeof(CUSTOMVERTEX), 0, D3DFVF_CUSTOMVERTEX, D3DPOOL_DEFAULT, &g_pVB, NULL)
- 3 * sizeof(CUSTOMVERTEX) : 정점 버퍼의 크기를 바이트 단위로 지정한다. 각 정점의 크기는 구조체의 크기로 정하며 sizeof로 해당 구조체의 크기를 구하고 (구조체의 크기 * 필요한 정점의 수)를 바이트 단위로 변환하여 매개변수로 사용한다.
- D3DFVF_CUSTOMVERTEX : 버퍼가 저장될 메모리 풀을 지정하며 디폴트는 Direct3D가 최적의 메모리 위치를 자동으로 선택하게 한다.
- &g_pVB : IDirect3DVertexBuffer9의 포인터. 생성된 정점 버퍼를 가리킨다.
- Lock : 버퍼에 대한 메모리에 접근한다. 그리고 그 버퍼 영역이 잠겨 GPU의 접근을 막게 된다.

#4. UpdateWindow : 윈도우의 클라이언트 영역을 그리기 위해 Paint 메시지를 보낸다.

#5. ShowWindow : 윈도우의 표시 상태를 설정하는 WinAPI 함수. 윈도우를 화면에 보이게 하거나 숨기거나, 최소화 또는 최대화 상태로 설정 가능하다.

#6. 메시지 루프 : API 사용자의 입력 및 시스템 메시지를 처리하고, 메시지가 없다면 다른 작업(Render)을 수행한다. 메시지 루프는 WM_QUIT 메시지가 발생할 때까지 실행된다.
- WM_QUIT : 윈도우 API에서 프로그램 종료를 요청할 때 사용되는 시스템 메시지

if (PeekMessage(&msg, NULL, 0U, 0U, PM_REMOVE))
{
	TranslateMessage(&msg);
	DispatchMessage(&msg);
}

#9. 초기화 객체들 소거
- 사용이 끝난 리소스를 해제하여 메모리 누수 문제를 방지한다.